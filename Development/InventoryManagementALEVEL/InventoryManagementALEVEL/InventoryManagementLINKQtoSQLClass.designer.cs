#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace InventoryManagementALEVEL
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="InventoryManagementDB")]
	public partial class InventoryManagementLINKQtoSQLClassDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAccountsTable(AccountsTable instance);
    partial void UpdateAccountsTable(AccountsTable instance);
    partial void DeleteAccountsTable(AccountsTable instance);
    partial void InsertCategoryTable(CategoryTable instance);
    partial void UpdateCategoryTable(CategoryTable instance);
    partial void DeleteCategoryTable(CategoryTable instance);
    partial void InsertEventLogTable(EventLogTable instance);
    partial void UpdateEventLogTable(EventLogTable instance);
    partial void DeleteEventLogTable(EventLogTable instance);
    partial void InsertForSaleTable(ForSaleTable instance);
    partial void UpdateForSaleTable(ForSaleTable instance);
    partial void DeleteForSaleTable(ForSaleTable instance);
    partial void InsertInventoryTable(InventoryTable instance);
    partial void UpdateInventoryTable(InventoryTable instance);
    partial void DeleteInventoryTable(InventoryTable instance);
    partial void InsertPerformanceTable(PerformanceTable instance);
    partial void UpdatePerformanceTable(PerformanceTable instance);
    partial void DeletePerformanceTable(PerformanceTable instance);
    #endregion
		
		public InventoryManagementLINKQtoSQLClassDataContext() : 
				base(global::InventoryManagementALEVEL.Properties.Settings.Default.InventoryManagementDBConnectionString1, mappingSource)
		{
			OnCreated();
		}
		
		public InventoryManagementLINKQtoSQLClassDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public InventoryManagementLINKQtoSQLClassDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public InventoryManagementLINKQtoSQLClassDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public InventoryManagementLINKQtoSQLClassDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<AccountsTable> AccountsTables
		{
			get
			{
				return this.GetTable<AccountsTable>();
			}
		}
		
		public System.Data.Linq.Table<CategoryTable> CategoryTables
		{
			get
			{
				return this.GetTable<CategoryTable>();
			}
		}
		
		public System.Data.Linq.Table<EventLogTable> EventLogTables
		{
			get
			{
				return this.GetTable<EventLogTable>();
			}
		}
		
		public System.Data.Linq.Table<ForSaleTable> ForSaleTables
		{
			get
			{
				return this.GetTable<ForSaleTable>();
			}
		}
		
		public System.Data.Linq.Table<InventoryTable> InventoryTables
		{
			get
			{
				return this.GetTable<InventoryTable>();
			}
		}
		
		public System.Data.Linq.Table<PerformanceTable> PerformanceTables
		{
			get
			{
				return this.GetTable<PerformanceTable>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AccountsTable")]
	public partial class AccountsTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Username;
		
		private string _Password;
		
		private string _FirstName;
		
		private string _LastName;
		
		private string _Role;
		
		private EntitySet<EventLogTable> _EventLogTables;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUsernameChanging(string value);
    partial void OnUsernameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnRoleChanging(string value);
    partial void OnRoleChanged();
    #endregion
		
		public AccountsTable()
		{
			this._EventLogTables = new EntitySet<EventLogTable>(new Action<EventLogTable>(this.attach_EventLogTables), new Action<EventLogTable>(this.detach_EventLogTables));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Username", DbType="NChar(100) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Username
		{
			get
			{
				return this._Username;
			}
			set
			{
				if ((this._Username != value))
				{
					this.OnUsernameChanging(value);
					this.SendPropertyChanging();
					this._Username = value;
					this.SendPropertyChanged("Username");
					this.OnUsernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="NChar(100)")]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="NChar(10)")]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="NChar(10)")]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Role", DbType="NChar(50)")]
		public string Role
		{
			get
			{
				return this._Role;
			}
			set
			{
				if ((this._Role != value))
				{
					this.OnRoleChanging(value);
					this.SendPropertyChanging();
					this._Role = value;
					this.SendPropertyChanged("Role");
					this.OnRoleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AccountsTable_EventLogTable", Storage="_EventLogTables", ThisKey="Username", OtherKey="Username")]
		public EntitySet<EventLogTable> EventLogTables
		{
			get
			{
				return this._EventLogTables;
			}
			set
			{
				this._EventLogTables.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_EventLogTables(EventLogTable entity)
		{
			this.SendPropertyChanging();
			entity.AccountsTable = this;
		}
		
		private void detach_EventLogTables(EventLogTable entity)
		{
			this.SendPropertyChanging();
			entity.AccountsTable = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CategoryTable")]
	public partial class CategoryTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _CategoryName;
		
		private EntitySet<ForSaleTable> _ForSaleTables;
		
		private EntitySet<InventoryTable> _InventoryTables;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCategoryNameChanging(string value);
    partial void OnCategoryNameChanged();
    #endregion
		
		public CategoryTable()
		{
			this._ForSaleTables = new EntitySet<ForSaleTable>(new Action<ForSaleTable>(this.attach_ForSaleTables), new Action<ForSaleTable>(this.detach_ForSaleTables));
			this._InventoryTables = new EntitySet<InventoryTable>(new Action<InventoryTable>(this.attach_InventoryTables), new Action<InventoryTable>(this.detach_InventoryTables));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryName", DbType="NChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string CategoryName
		{
			get
			{
				return this._CategoryName;
			}
			set
			{
				if ((this._CategoryName != value))
				{
					this.OnCategoryNameChanging(value);
					this.SendPropertyChanging();
					this._CategoryName = value;
					this.SendPropertyChanged("CategoryName");
					this.OnCategoryNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CategoryTable_ForSaleTable", Storage="_ForSaleTables", ThisKey="CategoryName", OtherKey="CategoryName")]
		public EntitySet<ForSaleTable> ForSaleTables
		{
			get
			{
				return this._ForSaleTables;
			}
			set
			{
				this._ForSaleTables.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CategoryTable_InventoryTable", Storage="_InventoryTables", ThisKey="CategoryName", OtherKey="CategoryName")]
		public EntitySet<InventoryTable> InventoryTables
		{
			get
			{
				return this._InventoryTables;
			}
			set
			{
				this._InventoryTables.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ForSaleTables(ForSaleTable entity)
		{
			this.SendPropertyChanging();
			entity.CategoryTable = this;
		}
		
		private void detach_ForSaleTables(ForSaleTable entity)
		{
			this.SendPropertyChanging();
			entity.CategoryTable = null;
		}
		
		private void attach_InventoryTables(InventoryTable entity)
		{
			this.SendPropertyChanging();
			entity.CategoryTable = this;
		}
		
		private void detach_InventoryTables(InventoryTable entity)
		{
			this.SendPropertyChanging();
			entity.CategoryTable = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EventLogTable")]
	public partial class EventLogTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ActionID;
		
		private string _Action;
		
		private string _Username;
		
		private string _FirstName;
		
		private string _Role;
		
		private System.DateTime _TimeOfAction;
		
		private EntityRef<AccountsTable> _AccountsTable;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnActionIDChanging(int value);
    partial void OnActionIDChanged();
    partial void OnActionChanging(string value);
    partial void OnActionChanged();
    partial void OnUsernameChanging(string value);
    partial void OnUsernameChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnRoleChanging(string value);
    partial void OnRoleChanged();
    partial void OnTimeOfActionChanging(System.DateTime value);
    partial void OnTimeOfActionChanged();
    #endregion
		
		public EventLogTable()
		{
			this._AccountsTable = default(EntityRef<AccountsTable>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActionID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ActionID
		{
			get
			{
				return this._ActionID;
			}
			set
			{
				if ((this._ActionID != value))
				{
					this.OnActionIDChanging(value);
					this.SendPropertyChanging();
					this._ActionID = value;
					this.SendPropertyChanged("ActionID");
					this.OnActionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Action", DbType="NChar(100)")]
		public string Action
		{
			get
			{
				return this._Action;
			}
			set
			{
				if ((this._Action != value))
				{
					this.OnActionChanging(value);
					this.SendPropertyChanging();
					this._Action = value;
					this.SendPropertyChanged("Action");
					this.OnActionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Username", DbType="NChar(100) NOT NULL", CanBeNull=false)]
		public string Username
		{
			get
			{
				return this._Username;
			}
			set
			{
				if ((this._Username != value))
				{
					if (this._AccountsTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUsernameChanging(value);
					this.SendPropertyChanging();
					this._Username = value;
					this.SendPropertyChanged("Username");
					this.OnUsernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="NChar(10)")]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Role", DbType="NChar(50)")]
		public string Role
		{
			get
			{
				return this._Role;
			}
			set
			{
				if ((this._Role != value))
				{
					this.OnRoleChanging(value);
					this.SendPropertyChanging();
					this._Role = value;
					this.SendPropertyChanged("Role");
					this.OnRoleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TimeOfAction", DbType="Date NOT NULL")]
		public System.DateTime TimeOfAction
		{
			get
			{
				return this._TimeOfAction;
			}
			set
			{
				if ((this._TimeOfAction != value))
				{
					this.OnTimeOfActionChanging(value);
					this.SendPropertyChanging();
					this._TimeOfAction = value;
					this.SendPropertyChanged("TimeOfAction");
					this.OnTimeOfActionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AccountsTable_EventLogTable", Storage="_AccountsTable", ThisKey="Username", OtherKey="Username", IsForeignKey=true)]
		public AccountsTable AccountsTable
		{
			get
			{
				return this._AccountsTable.Entity;
			}
			set
			{
				AccountsTable previousValue = this._AccountsTable.Entity;
				if (((previousValue != value) 
							|| (this._AccountsTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AccountsTable.Entity = null;
						previousValue.EventLogTables.Remove(this);
					}
					this._AccountsTable.Entity = value;
					if ((value != null))
					{
						value.EventLogTables.Add(this);
						this._Username = value.Username;
					}
					else
					{
						this._Username = default(string);
					}
					this.SendPropertyChanged("AccountsTable");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ForSaleTable")]
	public partial class ForSaleTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ItemID;
		
		private string _CategoryName;
		
		private string _ItemName;
		
		private System.Nullable<int> _Quantity;
		
		private System.Nullable<System.DateTime> _SellByDate;
		
		private EntityRef<CategoryTable> _CategoryTable;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnItemIDChanging(int value);
    partial void OnItemIDChanged();
    partial void OnCategoryNameChanging(string value);
    partial void OnCategoryNameChanged();
    partial void OnItemNameChanging(string value);
    partial void OnItemNameChanged();
    partial void OnQuantityChanging(System.Nullable<int> value);
    partial void OnQuantityChanged();
    partial void OnSellByDateChanging(System.Nullable<System.DateTime> value);
    partial void OnSellByDateChanged();
    #endregion
		
		public ForSaleTable()
		{
			this._CategoryTable = default(EntityRef<CategoryTable>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ItemID
		{
			get
			{
				return this._ItemID;
			}
			set
			{
				if ((this._ItemID != value))
				{
					this.OnItemIDChanging(value);
					this.SendPropertyChanging();
					this._ItemID = value;
					this.SendPropertyChanged("ItemID");
					this.OnItemIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryName", DbType="NChar(10) NOT NULL", CanBeNull=false)]
		public string CategoryName
		{
			get
			{
				return this._CategoryName;
			}
			set
			{
				if ((this._CategoryName != value))
				{
					if (this._CategoryTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCategoryNameChanging(value);
					this.SendPropertyChanging();
					this._CategoryName = value;
					this.SendPropertyChanged("CategoryName");
					this.OnCategoryNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemName", DbType="NChar(50)")]
		public string ItemName
		{
			get
			{
				return this._ItemName;
			}
			set
			{
				if ((this._ItemName != value))
				{
					this.OnItemNameChanging(value);
					this.SendPropertyChanging();
					this._ItemName = value;
					this.SendPropertyChanged("ItemName");
					this.OnItemNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quantity", DbType="Int")]
		public System.Nullable<int> Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged("Quantity");
					this.OnQuantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SellByDate", DbType="Date")]
		public System.Nullable<System.DateTime> SellByDate
		{
			get
			{
				return this._SellByDate;
			}
			set
			{
				if ((this._SellByDate != value))
				{
					this.OnSellByDateChanging(value);
					this.SendPropertyChanging();
					this._SellByDate = value;
					this.SendPropertyChanged("SellByDate");
					this.OnSellByDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CategoryTable_ForSaleTable", Storage="_CategoryTable", ThisKey="CategoryName", OtherKey="CategoryName", IsForeignKey=true)]
		public CategoryTable CategoryTable
		{
			get
			{
				return this._CategoryTable.Entity;
			}
			set
			{
				CategoryTable previousValue = this._CategoryTable.Entity;
				if (((previousValue != value) 
							|| (this._CategoryTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CategoryTable.Entity = null;
						previousValue.ForSaleTables.Remove(this);
					}
					this._CategoryTable.Entity = value;
					if ((value != null))
					{
						value.ForSaleTables.Add(this);
						this._CategoryName = value.CategoryName;
					}
					else
					{
						this._CategoryName = default(string);
					}
					this.SendPropertyChanged("CategoryTable");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.InventoryTable")]
	public partial class InventoryTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ItemID;
		
		private string _CategoryName;
		
		private string _ItemName;
		
		private System.Nullable<int> _Quantity;
		
		private EntityRef<CategoryTable> _CategoryTable;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnItemIDChanging(int value);
    partial void OnItemIDChanged();
    partial void OnCategoryNameChanging(string value);
    partial void OnCategoryNameChanged();
    partial void OnItemNameChanging(string value);
    partial void OnItemNameChanged();
    partial void OnQuantityChanging(System.Nullable<int> value);
    partial void OnQuantityChanged();
    #endregion
		
		public InventoryTable()
		{
			this._CategoryTable = default(EntityRef<CategoryTable>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ItemID
		{
			get
			{
				return this._ItemID;
			}
			set
			{
				if ((this._ItemID != value))
				{
					this.OnItemIDChanging(value);
					this.SendPropertyChanging();
					this._ItemID = value;
					this.SendPropertyChanged("ItemID");
					this.OnItemIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryName", DbType="NChar(10) NOT NULL", CanBeNull=false)]
		public string CategoryName
		{
			get
			{
				return this._CategoryName;
			}
			set
			{
				if ((this._CategoryName != value))
				{
					if (this._CategoryTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCategoryNameChanging(value);
					this.SendPropertyChanging();
					this._CategoryName = value;
					this.SendPropertyChanged("CategoryName");
					this.OnCategoryNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemName", DbType="NChar(50)")]
		public string ItemName
		{
			get
			{
				return this._ItemName;
			}
			set
			{
				if ((this._ItemName != value))
				{
					this.OnItemNameChanging(value);
					this.SendPropertyChanging();
					this._ItemName = value;
					this.SendPropertyChanged("ItemName");
					this.OnItemNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quantity", DbType="Int")]
		public System.Nullable<int> Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged("Quantity");
					this.OnQuantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CategoryTable_InventoryTable", Storage="_CategoryTable", ThisKey="CategoryName", OtherKey="CategoryName", IsForeignKey=true)]
		public CategoryTable CategoryTable
		{
			get
			{
				return this._CategoryTable.Entity;
			}
			set
			{
				CategoryTable previousValue = this._CategoryTable.Entity;
				if (((previousValue != value) 
							|| (this._CategoryTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CategoryTable.Entity = null;
						previousValue.InventoryTables.Remove(this);
					}
					this._CategoryTable.Entity = value;
					if ((value != null))
					{
						value.InventoryTables.Add(this);
						this._CategoryName = value.CategoryName;
					}
					else
					{
						this._CategoryName = default(string);
					}
					this.SendPropertyChanged("CategoryTable");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PerformanceTable")]
	public partial class PerformanceTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PeformanceID;
		
		private string _ItemName;
		
		private System.Nullable<int> _January;
		
		private System.Nullable<int> _February;
		
		private System.Nullable<int> _March;
		
		private System.Nullable<int> _April;
		
		private System.Nullable<int> _May;
		
		private System.Nullable<int> _June;
		
		private System.Nullable<int> _July;
		
		private System.Nullable<int> _August;
		
		private System.Nullable<int> _September;
		
		private System.Nullable<int> _October;
		
		private System.Nullable<int> _November;
		
		private System.Nullable<int> _December;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPeformanceIDChanging(int value);
    partial void OnPeformanceIDChanged();
    partial void OnItemNameChanging(string value);
    partial void OnItemNameChanged();
    partial void OnJanuaryChanging(System.Nullable<int> value);
    partial void OnJanuaryChanged();
    partial void OnFebruaryChanging(System.Nullable<int> value);
    partial void OnFebruaryChanged();
    partial void OnMarchChanging(System.Nullable<int> value);
    partial void OnMarchChanged();
    partial void OnAprilChanging(System.Nullable<int> value);
    partial void OnAprilChanged();
    partial void OnMayChanging(System.Nullable<int> value);
    partial void OnMayChanged();
    partial void OnJuneChanging(System.Nullable<int> value);
    partial void OnJuneChanged();
    partial void OnJulyChanging(System.Nullable<int> value);
    partial void OnJulyChanged();
    partial void OnAugustChanging(System.Nullable<int> value);
    partial void OnAugustChanged();
    partial void OnSeptemberChanging(System.Nullable<int> value);
    partial void OnSeptemberChanged();
    partial void OnOctoberChanging(System.Nullable<int> value);
    partial void OnOctoberChanged();
    partial void OnNovemberChanging(System.Nullable<int> value);
    partial void OnNovemberChanged();
    partial void OnDecemberChanging(System.Nullable<int> value);
    partial void OnDecemberChanged();
    #endregion
		
		public PerformanceTable()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PeformanceID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PeformanceID
		{
			get
			{
				return this._PeformanceID;
			}
			set
			{
				if ((this._PeformanceID != value))
				{
					this.OnPeformanceIDChanging(value);
					this.SendPropertyChanging();
					this._PeformanceID = value;
					this.SendPropertyChanged("PeformanceID");
					this.OnPeformanceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemName", DbType="NChar(50)")]
		public string ItemName
		{
			get
			{
				return this._ItemName;
			}
			set
			{
				if ((this._ItemName != value))
				{
					this.OnItemNameChanging(value);
					this.SendPropertyChanging();
					this._ItemName = value;
					this.SendPropertyChanged("ItemName");
					this.OnItemNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_January", DbType="Int")]
		public System.Nullable<int> January
		{
			get
			{
				return this._January;
			}
			set
			{
				if ((this._January != value))
				{
					this.OnJanuaryChanging(value);
					this.SendPropertyChanging();
					this._January = value;
					this.SendPropertyChanged("January");
					this.OnJanuaryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_February", DbType="Int")]
		public System.Nullable<int> February
		{
			get
			{
				return this._February;
			}
			set
			{
				if ((this._February != value))
				{
					this.OnFebruaryChanging(value);
					this.SendPropertyChanging();
					this._February = value;
					this.SendPropertyChanged("February");
					this.OnFebruaryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_March", DbType="Int")]
		public System.Nullable<int> March
		{
			get
			{
				return this._March;
			}
			set
			{
				if ((this._March != value))
				{
					this.OnMarchChanging(value);
					this.SendPropertyChanging();
					this._March = value;
					this.SendPropertyChanged("March");
					this.OnMarchChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_April", DbType="Int")]
		public System.Nullable<int> April
		{
			get
			{
				return this._April;
			}
			set
			{
				if ((this._April != value))
				{
					this.OnAprilChanging(value);
					this.SendPropertyChanging();
					this._April = value;
					this.SendPropertyChanged("April");
					this.OnAprilChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_May", DbType="Int")]
		public System.Nullable<int> May
		{
			get
			{
				return this._May;
			}
			set
			{
				if ((this._May != value))
				{
					this.OnMayChanging(value);
					this.SendPropertyChanging();
					this._May = value;
					this.SendPropertyChanged("May");
					this.OnMayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_June", DbType="Int")]
		public System.Nullable<int> June
		{
			get
			{
				return this._June;
			}
			set
			{
				if ((this._June != value))
				{
					this.OnJuneChanging(value);
					this.SendPropertyChanging();
					this._June = value;
					this.SendPropertyChanged("June");
					this.OnJuneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_July", DbType="Int")]
		public System.Nullable<int> July
		{
			get
			{
				return this._July;
			}
			set
			{
				if ((this._July != value))
				{
					this.OnJulyChanging(value);
					this.SendPropertyChanging();
					this._July = value;
					this.SendPropertyChanged("July");
					this.OnJulyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_August", DbType="Int")]
		public System.Nullable<int> August
		{
			get
			{
				return this._August;
			}
			set
			{
				if ((this._August != value))
				{
					this.OnAugustChanging(value);
					this.SendPropertyChanging();
					this._August = value;
					this.SendPropertyChanged("August");
					this.OnAugustChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_September", DbType="Int")]
		public System.Nullable<int> September
		{
			get
			{
				return this._September;
			}
			set
			{
				if ((this._September != value))
				{
					this.OnSeptemberChanging(value);
					this.SendPropertyChanging();
					this._September = value;
					this.SendPropertyChanged("September");
					this.OnSeptemberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_October", DbType="Int")]
		public System.Nullable<int> October
		{
			get
			{
				return this._October;
			}
			set
			{
				if ((this._October != value))
				{
					this.OnOctoberChanging(value);
					this.SendPropertyChanging();
					this._October = value;
					this.SendPropertyChanged("October");
					this.OnOctoberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_November", DbType="Int")]
		public System.Nullable<int> November
		{
			get
			{
				return this._November;
			}
			set
			{
				if ((this._November != value))
				{
					this.OnNovemberChanging(value);
					this.SendPropertyChanging();
					this._November = value;
					this.SendPropertyChanged("November");
					this.OnNovemberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_December", DbType="Int")]
		public System.Nullable<int> December
		{
			get
			{
				return this._December;
			}
			set
			{
				if ((this._December != value))
				{
					this.OnDecemberChanging(value);
					this.SendPropertyChanging();
					this._December = value;
					this.SendPropertyChanged("December");
					this.OnDecemberChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
